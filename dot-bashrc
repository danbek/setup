# ~/.bashrc: executed by bash(1) for non-login shells.

# if not running interactively, don't do anything
[ -z "$PS1" ] && return

# bash completion could be located in more than one place
if [ -f /opt/local/etc/bash_completion ]; then
    . /opt/local/etc/bash_completion
elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# git completion comes from here on osx
if [ -f /opt/local/share/doc/git-core/contrib/completion/git-completion.bash ]; then
    GIT_COMPLETION=true
    source /opt/local/share/doc/git-core/contrib/completion/git-completion.bash
fi

# History stuff
HISTCONTROL=ignoredups:ignorespace
shopt -s histappend # append to the history file, don't overwrite it
HISTSIZE=10000
HISTFILESIZE=$HISTSIZE

# EDITOR
export EDITOR=vi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# turn off stupid bell?
set term -blength 0

# my prompt

if [ "x$GIT_COMPLETION" == "xtrue" ]; then
    PS1='[${debian_chroot:+($debian_chroot)}\u@\h:\w]$(__git_ps1 "(%s)")\n$ '
else
    PS1='[${debian_chroot:+($debian_chroot)}\u@\h:\w]\n$ '
fi

# terminal stuff

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

## enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -FC --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    alias ls='ls -FC'
fi

# 
# CYGWIN-specific customizations
# 

if [ `uname -s | head -c 6` == "CYGWIN" ]; then

    # Get ssh-agent working under cygwin

    export SSH_AUTH_SOCK=/tmp/.ssh-socket

    ssh-add -l >/dev/null 2>&1

    if [ $? = 2 ]; then
        # Exit status 2 means couldn't connect to ssh-agent; start one now
        rm -rf /tmp/.ssh-*
        ssh-agent -a $SSH_AUTH_SOCK >/tmp/.ssh-script
        . /tmp/.ssh-script
        echo $SSH_AGENT_PID >/tmp/.ssh-agent-pid
    fi

    function kill-agent {
        pid=`cat /tmp/.ssh-agent-pid`
        kill $pid
    }

    alias add-key='ssh-add ~/.ssh/id_rsa'

    # Now I can ssh -Y directly from mintty shell
    export DISPLAY=:0.0

    # Set a variable indicated MINTTY for use in .vimrc
    case "$(< /proc/$PPID/exename)" in
        */mintty) 
            export MINTTY=true
            ;;
    esac

    # Add java to path
    export PATH=$PATH:"/cygdrive/c/Program Files/Java/jdk1.7.0_21/bin"

fi

# aliases
alias l='ls -FC'
alias ll='ls -alF'
alias lsd='ls -l | grep ^d'

alias mce='ssh -Y 817thzdev.bqemd.nist.gov'
alias grumpy='ssh -Y grumpy'

# deal with frogfly stuff
alias frog='ssh -Y frogfly.org'
alias mblog='sshfs frogfly.org:blog ~/blog'
alias umblog='fusermount -u ~/blog'

alias mlab='matlab -nosplash -nodesktop'

# from ubuntu 12.04. Need to check on OSX
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias cal='cd /cygdrive/e/beckerd/Documents/thz/board-design/ThzFullArray'
alias csw='cd /cygdrive/h/from_lab_computer/THzFocalPlane'

# allows matlab (and some other java-based applications)
# to work under awesome
wmname LG3D

